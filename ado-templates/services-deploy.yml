# deploys the stack into an AWS account using pulumi and EB
---
parameters:
- name: environment
  type: string

jobs:
  - job: ServicesInfrastructure
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Cache@2
        displayName: Cache Yarn packages
        inputs:
          key: 'pulumi | services | yarn | "$(Agent.OS)" | yarn.lock'
          path: $(YARN_CACHE_FOLDER)

      - script: yarn
        displayName: 'install pulumi dependencies'
        workingDirectory: 'backend-infra/'

        # runs `pulumi preview` if PR or manual build invoked
      - task: Pulumi@1
        condition: or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))
        inputs:
          command: 'preview'
          cwd: 'backend-infra/'
          stack: 'binhrobles/transcribe-backend/${{ parameters.environment }}'

        # runs `pulumi up --yes` if triggered by Git push
      - task: Pulumi@1
        condition: or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI'))
        inputs:
          command: 'up'
          cwd: 'backend-infra/'
          stack: 'binhrobles/transcribe-backend/${{ parameters.environment }}'
          args: '--yes'

      - script: |
          echo "##vso[task.setvariable variable=endpoint;isOutput=true]$(pulumi stack output endpoint)"
          echo "##vso[task.setvariable variable=applicationName;isOutput=true]$(pulumi stack output applicationName)"
          echo "##vso[task.setvariable variable=environmentName;isOutput=true]$(pulumi stack output environmentName)"
        displayName: 'Set stack outputs as variables'
        workingDirectory: 'backend-infra/'
        name: 'pulumi'

  - job: EBDeploy
    dependsOn:
      - ServicesInfrastructure
    pool:
      vmImage: 'ubuntu-latest'

    # map in the output from previous job
    # remember, expressions require single quotes
    variables:
      applicationName: $[ dependencies.ServicesInfrastructure.outputs['pulumi.applicationName'] ]
      environmentName: $[ dependencies.ServicesInfrastructure.outputs['pulumi.environmentName'] ]
      archiveName: $(Build.SourceVersion).zip
      bucketName: 'elasticbeanstalk-$(aws.region)-$(aws.accountId)' # use default eb bucket

    steps:
        # create source bundle for EB, which is really just a declaration of where
        # the Docker images to be used are
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: Dockerrun.aws.json
          archiveFile: $(archiveName)
          archiveType: zip
          replaceExistingArchive: true

      - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
        displayName: 'S3 Upload: source bundle to $(aws.accountId)'
        inputs:
          bucketName: $(bucketName)
          globExpressions: $(archiveName)
          targetFolder: $(applicationName)
          regionName: $(aws.region)
        env:  # explicitly map in secret env vars
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      - task: BeanstalkDeployApplication@1
        inputs:
          applicationType: s3
          regionName: $(aws.region)
          applicationName: $(applicationName)
          environmentName: $(environmentName)
          deploymentBundleBucket: $(bucketName)
          deploymentBundleKey: '$(applicationName)/$(archiveName)'
        env:  # explicitly map in secret env vars
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
